#!/bin/bash

function check-prerequisites {
	[ "" == "$(which kpartx)" ] && echo "please install kpartx" && exit 1
	[ "" == "$(which pv)" ] && echo "please install pv" && exit 1
	[ "" == "$(which qemu-arm-static)" ] && echo "please install qemu-arm-static" && exit 1
	[ "" == "$(which bmaptool)" ] && echo "please install bmaptool" && exit 1
}

function mount-ram-disk {
	if [ "" == "$(mount | grep ${RAM_DISK_DIR})" ]; then
		INFO "mounting ram disk: $(LIGHT_GREEN ${RAM_DISK_DIR})"
		[ ! -d "${RAM_DISK_DIR}" ] && mkdir -p ${RAM_DISK_DIR}
		mount -t tmpfs none ${RAM_DISK_DIR}
	else
		INFO "ram disk $(LIGHT_GREEN ${RAM_DISK_DIR}) is already mount"
	fi
}

function download-bbb-image {
	if [ ! -f "${BBB_IMAGE}" ]; then
		INFO "missing ${BBB_IMAGE}"
		wget -O ${BBB_IMAGE} ${BBB_IMAGE_URL} || exit 1
	else
		INFO "${BBB_IMAGE} exists"
	fi

	if [ "" != "${BBB_KERNEL_URL}" ]; then
		if [ ! -f "${BBB_KERNEL_ARCHIVE}" ]; then
			INFO "missing ${BBB_KERNEL_ARCHIVE}"
			wget -O ${BBB_KERNEL_ARCHIVE} ${BBB_KERNEL_URL} || exit 1
		else
			INFO "${BBB_KERNEL_ARCHIVE} exists"
		fi
	fi
}

function create-work-image {
	# Clean-up previous mount.
	# 
	if [ "" != "$(mount | grep ${WORK_ROOTFS_DIR}/)" ]; then 
		mount | grep "${WORK_ROOTFS_DIR}/" | awk '{print $3}' | xargs -I{} sh -c "echo umounting {}; umount {}"
		RUN_CMD_STREAMING sync
		RUN_CMD_STREAMING sync
		RUN_CMD_STREAMING sleep 1
	fi
	if [ "" != "$(mount | grep ${WORK_ROOTFS_DIR})" ]; then
		mount | grep "${WORK_ROOTFS_DIR}" | awk '{print $3}' | xargs -I{} sh -c "echo umounting {}; umount {}"
		RUN_CMD_STREAMING sync
		RUN_CMD_STREAMING sync
		RUN_CMD_STREAMING sleep 1
		ls -al ${WORK_IMAGE}
		losetup -a
		RUN_CMD_STREAMING kpartx -d -v ${WORK_IMAGE}
		losetup -a
	fi

	RUN_CMD_STREAMING rm -f ${WORK_IMAGE} || exit 1
	local FILENAME=$(basename ${BBB_IMAGE})
	local EXTENSION="${FILENAME#*.}"
	INFO "image file extension: ${EXTENSION}"

	INFO "copy bbb image to work image"
	unxz -c ${BBB_IMAGE} > ${WORK_IMAGE} || exit 1
	# unxz -c ${BBB_IMAGE} | pv > ${WORK_IMAGE} || exit 1

	if [ "true" == "${BMAP_DUMMY_OPT_SUPPORT}" ]; then
		INFO "dummy-run"
		RUN_CMD_STREAMING bmaptool create -o ${WORK_IMAGE}.bmap ${WORK_IMAGE}
		RUN_CMD_STREAMING bmaptool copy --bmap ${WORK_IMAGE}.bmap --dummy ${WORK_IMAGE} /dev/null
	fi
}

function mount-work-image {
	local TMP=$(mktemp /tmp/XXXXXX)
	kpartx -d -s -v ${WORK_IMAGE}
	kpartx -a -s -v ${WORK_IMAGE} > ${TMP} 2>&1
	[ "0" != "$?" ] && ERR "failed to mount ${WORK_IMAGE}" && cat ${TMP} && exit 1
	export WORK_DEVICE="/dev/mapper/$(cat ${TMP} | tail -n1 | awk '{print $3}')"
	INFO "working device: $(LIGHT_GREEN ${WORK_DEVICE})"

	[ ! -d "${WORK_ROOTFS_DIR}" ] && RUN_CMD_STREAMING mkdir -p ${WORK_ROOTFS_DIR}
	RUN_CMD_STREAMING mount -t ext4 ${WORK_DEVICE} ${WORK_ROOTFS_DIR}
	INFO "working rootfs: $(LIGHT_GREEN ${WORK_ROOTFS_DIR})"
}

function pre-rootfs {
	RUN_CMD_STREAMING cp $(which qemu-arm-static) ${WORK_ROOTFS_DIR}/usr/bin
	RUN_CMD_STREAMING mount -o bind /tmp ${WORK_ROOTFS_DIR}/tmp
	RUN_CMD_STREAMING mount -o bind /dev ${WORK_ROOTFS_DIR}/dev
	RUN_CMD_STREAMING mount -o bind /proc ${WORK_ROOTFS_DIR}/proc
	RUN_CMD_STREAMING mount -o bind /sys ${WORK_ROOTFS_DIR}/sys
	RUN_CMD_STREAMING mv ${WORK_ROOTFS_DIR}/etc/resolv.conf ${WORK_ROOTFS_DIR}/etc/resolv.conf.bak
	echo "nameserver 8.8.8.8" > ${WORK_ROOTFS_DIR}/etc/resolv.conf
	if [ ! -f /tmp/bash-utils/system ]; then
		mkdir -p /tmp/bash-utils
		cp $(dirname $0)/externals/bash-utils/system /tmp/bash-utils/
	fi

	# This registers the static QEMU we copied as arm-interpreter to the kernel.
	#
	echo ':arm:M::\x7fELF\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x28\x00:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff:/usr/bin/qemu-arm-static:' > /proc/sys/fs/binfmt_misc/register

	RUN_CMD_STREAMING wget -q -O /tmp/repos.rcn-ee.net.gpg.key http://repos.rcn-ee.net/ubuntu/conf/repos.rcn-ee.net.gpg.key
}

function run-chroot-cmd {
	INFO "$(LIGHT_GREEN $@)"
	chroot ${WORK_ROOTFS_DIR} /bin/bash -c "$@"
}

function process-rootfs {
	local TMPDIR="/tmp"
	if [ ! -d "${TMPDIR}/dotfiles" ]; then
		INFO "dotfiles: downloading from github"
		git clone -q https://github.com/yagamy4680/dotfiles.git ${TMPDIR}/dotfiles
		cd ${TMPDIR}/dotfiles
		INFO "dotfiles: init sub-module"
		git submodule init -q
		INFO "dotfiles: update sub-module"
		git submodule update -q
		touch ${TMPDIR}/dotfiles/.bootstrapped
	else
		cd ${TMPDIR}/dotfiles
		git pull
		cd ${CURRENT}
	fi
	cat ${CURRENT}/apt-packages.conf | grep -v "^#" | sed 's/^ *$//g' | grep -v "^$" | sort > /tmp/apt-packages.conf
	INFO "dotfiles: copying from ${TMPDIR}/dotfiles to ${WORK_ROOTFS_DIR}/opt"
	cp -R ${TMPDIR}/dotfiles ${WORK_ROOTFS_DIR}/opt
	run-chroot-cmd "apt-key add /tmp/repos.rcn-ee.net.gpg.key"
	run-chroot-cmd "apt-get update -q"
	if [ "" != "${BBB_KERNEL_APT_PKG}" ]; then
		run-chroot-cmd "apt-get -q -y install ${BBB_KERNEL_APT_PKG}"
		run-chroot-cmd "apt-get update -q"
	fi
	if [ "" != "${BBB_KERNEL_URL}" ] && [ -f "${BBB_KERNEL_ARCHIVE}" ]; then
		INFO "applying ${BBB_KERNEL_ARCHIVE} to patch ${WORK_ROOTFS_DIR}"
		tar xf ${BBB_KERNEL_ARCHIVE} -C ${WORK_ROOTFS_DIR}
	fi
	run-chroot-cmd "apt-get -q -y install python3-pip $(cat /tmp/apt-packages.conf | tr '\n' ' ')"
	run-chroot-cmd "pip3 install -q $(cat ${CURRENT}/pip3-packages.conf | tr '\n' ' ')"
	run-chroot-cmd "echo 'Asia/Tokyo' > /etc/timezone && dpkg-reconfigure --frontend noninteractive tzdata"
	run-chroot-cmd "apt-get remove apache2 -y && apt-get purge apache2 -y"
	run-chroot-cmd "update-rc.d udhcpd disable"
	run-chroot-cmd "update-rc.d pppd-dns disable"
	run-chroot-cmd "cd /opt/dotfiles && ./bootstrap"
	run-chroot-cmd "source /tmp/bash-utils/system && generate_os_variable_dump"
	if [ "true" == "${SHELL_AFTER_INSTALL}" ]; then
		chroot ${WORK_ROOTFS_DIR} /bin/bash
	fi
	run-chroot-cmd "apt-get clean -y -q && apt-get autoclean -y -q && find /var/lib/apt -type f | xargs rm -f"
	run-chroot-cmd "rm -rf /var/tmp/*"
	if [ "true" == "${SHELL_AFTER_CLEANUP}" ]; then
		chroot ${WORK_ROOTFS_DIR} /bin/bash
	fi
}

function post-rootfs {
	# zero-fill will make bmaptool think all blocks are occupied, so
	# this size optimization shall not be used.
	#
	# RUN_CMD_STREAMING dd if=/dev/zero of=${WORK_ROOTFS_DIR}/EMPTY bs=1M 
	# RUN_CMD_STREAMING rm -f ${WORK_ROOTFS_DIR}/EMPTY
	find ${WORK_ROOTFS_DIR}/var/log -type f | while read f; do echo -ne '' > $f; done;
	RUN_CMD_STREAMING rm -rf /var/tmp/*
	RUN_CMD_STREAMING sync
	RUN_CMD_STREAMING sync
	RUN_CMD_STREAMING sleep 2
	RUN_CMD_STREAMING rm -f ${WORK_ROOTFS_DIR}/etc/resolv.conf
	RUN_CMD_STREAMING mv ${WORK_ROOTFS_DIR}/etc/resolv.conf.bak ${WORK_ROOTFS_DIR}/etc/resolv.conf
	RUN_CMD_STREAMING umount ${WORK_ROOTFS_DIR}/dev && sync
	RUN_CMD_STREAMING umount ${WORK_ROOTFS_DIR}/proc && sync
	RUN_CMD_STREAMING umount ${WORK_ROOTFS_DIR}/sys && sync
	RUN_CMD_STREAMING umount ${WORK_ROOTFS_DIR}/tmp && sync
	rm -f /tmp/repos.rcn-ee.net.gpg.key
}

function umount-image {
	RUN_CMD_STREAMING sync
	RUN_CMD_STREAMING sync
	RUN_CMD_STREAMING sleep 2
	RUN_CMD_STREAMING umount ${WORK_ROOTFS_DIR}
	RUN_CMD_STREAMING sync
	RUN_CMD_STREAMING sync
	RUN_CMD_STREAMING sleep 2
	RUN_CMD_STREAMING kpartx -d -v ${WORK_IMAGE}
}

function generate-image-bmap {
	RUN_CMD_STREAMING sync
	RUN_CMD_STREAMING sleep 2
	RUN_CMD_STREAMING bmaptool create -o ${WORK_IMAGE}.bmap ${WORK_IMAGE}

	if [ "true" == "${BMAP_DUMMY_OPT_SUPPORT}" ]; then
		INFO "dummy run"
		RUN_CMD_STREAMING bmaptool copy --bmap ${WORK_IMAGE}.bmap --dummy ${WORK_IMAGE} /dev/null
	fi
}

function init-variables {
	[ "" == "${RAM_DISK_DIR}" ] && export RAM_DISK_DIR="/tmp/tmpfs"
	export CURRENT=$(pwd)
	cd $(dirname $0)
	export BASEDIR=$(pwd)
	cd ${CURRENT}

	export BBB_IMAGE="/tmp/$(basename ${BBB_IMAGE_URL})"
	export BBB_KERNEL_ARCHIVE="/tmp/$(basename ${BBB_KERNEL_URL})"
	export WORK_IMAGE="${RAM_DISK_DIR}/work-image.bin"
	export WORK_ROOTFS_DIR="/mnt/bbb-rootfs"
	[ "" == "${BMAP_DUMMY_OPT_SUPPORT}" ] && export BMAP_DUMMY_OPT_SUPPORT="false"
}

function show_help {
IFS='' read -r -d '' HELPS <<__EOF__
$(LIGHT_GREEN $(basename $0)) $(GRAY [bbb-image-url])

Examples:
	$(LIGHT_GREEN $(basename $0)) $(GRAY https://rcn-ee.com/rootfs/2015-10-09/microsd/bone-ubuntu-14.04.3-console-armhf-2015-10-09-2gb.img.xz)
	$(LIGHT_GREEN $(basename $0)) $(GRAY https://rcn-ee.com/rootfs/2016-11-10/microsd/bone-ubuntu-16.04.1-console-armhf-2016-11-10-2gb.img.xz)
	$(LIGHT_GREEN $(basename $0)) $(GRAY https://archives.t2t.io/embedded-linux/os/beaglebone/mirrors/elinux.org/bb-green/bone-ubuntu-14.04.3-console-armhf-2016-02-11-2gb.img.xz)

Supported environment variables:
	SHELL_AFTER_INSTALL:  [true/false], run BASH shell in chroot after all packages are installed. Default: false
	SHELL_AFTER_CLEANUP:  [true/false], run BASH shell in chroot after all unnecessary files are cleaned up. Default: false
	BBB_KERNEL_URL :  URL to the kernel archive file to patch rootfs, e.g. https://archives.t2t.io/embedded-linux/os/beaglebone/kernels/bone-ubuntu-16.04-console-armhf-2016-06-09-2gb-kernel-4.4.12.tar.gz
__EOF__
echo -en "${HELPS}"
}

. $(dirname $0)/externals/bash-utils/verbose
. $(dirname $0)/externals/bash-utils/funcs

BBB_IMAGE_URL=$1
shift
[ "" == "${BBB_IMAGE_URL}" ] && show_help && exit 1
export BBB_IMAGE_URL


check-prerequisites
init-verbose $0
init-variables $@

download-bbb-image
mount-ram-disk
create-work-image

mount-work-image
pre-rootfs
process-rootfs
post-rootfs
umount-image

generate-image-bmap
